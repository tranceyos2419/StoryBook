{"version":3,"file":"static/iframe.6208574d6d45d81f4de1.bundle.js","sources":["webpack:///./src/lib/redux.js","webpack:///./src/componetns/TaskList.stories.js"],"sourcesContent":["// A simple redux store/actions/reducer implementation.\n// A true app would be more complex and separated into different files.\nimport { createStore } from 'redux';\n\n// The actions are the \"names\" of the changes that can happen to the store\nexport const actions = {\n    ARCHIVE_TASK: 'ARCHIVE_TASK',\n    PIN_TASK: 'PIN_TASK',\n};\n\n// The action creators are how you bundle actions with the data required to execute them\nexport const archiveTask = id => ({ type: actions.ARCHIVE_TASK, id });\nexport const pinTask = id => ({ type: actions.PIN_TASK, id });\n\n// All our reducers simply change the state of a single task.\nfunction taskStateReducer(taskState) {\n    return (state, action) => {\n        return {\n            ...state,\n            tasks: state.tasks.map(\n                task => (task.id === action.id ? { ...task, state: taskState } : task)\n            ),\n        };\n    };\n}\n\n// The reducer describes how the contents of the store change for each action\nexport const reducer = (state, action) => {\n    switch (action.type) {\n        case actions.ARCHIVE_TASK:\n            return taskStateReducer('TASK_ARCHIVED')(state, action);\n        case actions.PIN_TASK:\n            return taskStateReducer('TASK_PINNED')(state, action);\n        default:\n            return state;\n    }\n};\n\n// The initial state of our store when the app loads.\n// Usually you would fetch this from a server\nconst defaultTasks = [\n    { id: '1', title: 'Something', state: 'TASK_INBOX' },\n    { id: '2', title: 'Something more', state: 'TASK_INBOX' },\n    { id: '3', title: 'Something else', state: 'TASK_INBOX' },\n    { id: '4', title: 'Something again', state: 'TASK_INBOX' },\n];\n\n// We export the constructed redux store\nexport default createStore(reducer, { tasks: defaultTasks }, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n","import React from 'react';\nimport { storiesOf } from '@storybook/react';\n\nimport { PureTaskList } from './TaskList';\nimport { task, actions } from './Task.stories';\n\nexport const defaultTasks = [\n    { ...task, id: '1', title: 'Task 1' },\n    { ...task, id: '2', title: 'Task 2' },\n    { ...task, id: '3', title: 'Task 3' },\n    { ...task, id: '4', title: 'Task 4' },\n    { ...task, id: '5', title: 'Task 5' },\n    { ...task, id: '6', title: 'Task 6' },\n];\n\nexport const withPinnedTasks = [\n    ...defaultTasks.slice(0, 5),\n    { id: '6', title: 'Task 6 (pinned)', state: 'TASK_PINNED' },\n];\n\n//! This one is not using redux\nstoriesOf('TaskList', module)\n    .addDecorator(story => <div style={{ padding: '3rem' }}>{story()}</div>)\n    .add('default', () => <PureTaskList tasks={defaultTasks} {...actions} />)\n    .add('withPinnedTasks', () => <PureTaskList tasks={withPinnedTasks} {...actions} />)\n    .add('loading', () => <PureTaskList loading tasks={[]} {...actions} />)\n    .add('empty', () => <PureTaskList tasks={[]} {...actions} />);\n"],"mappings":"AAKA;ACgBA","sourceRoot":""}